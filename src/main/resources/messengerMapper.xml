<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 게시판 정보 처리 SQL -->
<mapper namespace="com.noback.group.dao.MessengerMapper">
	<select id="getTotalmessenger" parameterType="map" resultType="int">
		select count(*)
		from noback_messenger
		where  messenger_receiver = (#{searchId})
		<if test="search != null">
			and
			upper(messenger_content) like '%' || upper(#{search}) || '%'
		</if>
	</select>
	
	<select id="getTotalmember" parameterType="map" resultType="int">
		select count(*)
		from noback_member
		where  employee_num = (#{searchId})
		<if test="search != null">
			and
			upper(employee_name) like '%' || upper(#{search}) || '%'
		</if>
	</select>
	<select id="listMessenger" parameterType="map" resultType="messenger">
		SELECT  
		tb.employee_num
         , m.employee_name as messenger_writer_name
         , tb.messenger_content
         , to_char(tb.messenger_date, 'YY/MM/DD') as messenger_date
         , v.employee_name as messenger_reciever_name

		FROM(
		SELECT ROW_NUMBER() OVER(PARTITION BY noback_messenger.employee_num, noback_messenger.MESSENGER_RECEIVER ORDER BY noback_messenger.messenger_date DESC ) AS RNUM, noback_messenger.*
		FROM noback_messenger ) tb, noback_member m, noback_member v
		WHERE tb.employee_num = m.employee_num AND tb.messenger_receiver = v.employee_num  and RNUM = 1 and tb.messenger_receiver=(#{searchId})
		<if test="search != null">
			and upper(tb.messenger_content) like '%' || upper(#{search}) || '%'
		</if>
		order by tb.MESSENGER_DATE desc
	</select>
	
	<select id="listMember" parameterType="map" resultType="member">
		select
			employee_num
			, employee_name
			, employee_dep
			, employee_pos
			, employee_email
			
		from 
			noback_member
		where employee_num  not in (#{searchId})
		<if test="search != null">
		 and upper(employee_name) like '%' || upper(#{search}) || '%'
		</if>
		order by 
			employee_name desc
	</select>
	
	
	
	<select id="messenger" parameterType="map" resultType="messenger">
		select

			 m.employee_name as messenger_writer_name
			, m.employee_picture as picture
			, s.messenger_content
			, to_char(s.messenger_date, 'YY/MM/DD HH:MI:SS') as messenger_date
			, v.employee_name as messenger_reciever_name 
			
		from 
			noback_messenger s, noback_member m, noback_member v
			where 
					(
						(
							s.employee_num = (#{num}) AND s.messenger_receiver = (#{searchId})
						)
    			AND
    					(
    						s.employee_num = m.employee_num AND s.messenger_receiver = v.employee_num 
    					)
    				)
    			
    		OR
    				(
    					(
    						s.employee_num = (#{searchId}) AND s.messenger_receiver = (#{num})
    					)
					AND
						(
							s.employee_num = m.employee_num AND s.messenger_receiver = v.employee_num 
						)
					)
					order by 
			s.messenger_date asc
		
	</select>
	
	<insert id="messengerinsert" parameterType="map">
		insert into noback_messenger
		values((#{searchId}), (#{content}),  sysdate, (#{num}))
	</insert>
	
	<delete id="boardDelete" parameterType="string">
		delete from noback_board
		where board_num = #{board_num}
	</delete>
	
	<update id="boardUpdate" parameterType="board">
		update noback_board
		set board_title = #{board_title}, board_content = #{board_content}
		where board_num = #{board_num}
	</update>
</mapper>





