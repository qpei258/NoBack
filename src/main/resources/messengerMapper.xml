<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 게시판 정보 처리 SQL -->
<mapper namespace="com.noback.group.dao.MessengerMapper">
	<select id="getTotalmessenger" parameterType="string" resultType="int">
		select count(*)
		from noback_messenger
		<if test="_parameter != null">
			where
			upper(messenger_content) like '%' || upper(#{search}) || '%'
		</if>
	</select>
	
	<select id="getTotalmember" parameterType="string" resultType="int">
		select count(*)
		from noback_member
		<if test="_parameter != null">
			where
			upper(employee_name) like '%' || upper(#{search}) || '%'
		</if>
	</select>
	
	<select id="listMessenger" parameterType="string" resultType="messenger">
		select
			m.employee_name as messenger_writer_name
			, s.messenger_content
			, to_char(s.messenger_date, 'YY/MM/DD') as messenger_date
			
		from 
			noback_messenger s, noback_member m
		where s.employee_num = m.employee_num <!--나중에 여기에서 세견 받아서 개인 메세지로 처리한다 우선은 여기에 전체 출력으로 한다 -->
		<if test="_parameter != null">
			and upper(s.messenger_content) like '%' || upper(#{search}) || '%'
		</if>
		order by 
			s.messenger_date desc
	</select>
	
	<select id="listMember" parameterType="string" resultType="member">
		select
			 employee_name
			, employee_dep
			, employee_pos
			, employee_email
			
		from 
			noback_member
		where <!--나중에 여기에서 세견 받아서 개인 메세지로 처리한다 우선은 여기에 전체 출력으로 한다 -->
		<if test="_parameter != null">
			 upper(employee_name) like '%' || upper(#{search}) || '%'
		</if>
		order by 
			employee_name desc
	</select>
	
	
	
	<select id="messenger" parameterType="string" resultType="messenger">
		select
			m.employee_name as messenger_writer_name
			, s.messenger_content
			, to_char(s.messenger_date, 'YY/MM/DD') as messenger_date
			, s.messenger_reciever<!--차후 여기도 이름으로 바꿔주기 -->
			
		from 
			noback_messenger s, noback_member m
		where s.employee_num = m.employee_num<!--나중에 여기에서 세견 받아서 개인 메세지로 처리한다 우선은 여기에 전체 출력으로 한다 -->
	</select>
	
	<insert id="boardWrite" parameterType="board">
		insert into noback_board
		values(board_seq.nextval, #{board_title}, #{board_content}, #{board_writer}, sysdate)
	</insert>
	
	<delete id="boardDelete" parameterType="string">
		delete from noback_board
		where board_num = #{board_num}
	</delete>
	
	<update id="boardUpdate" parameterType="board">
		update noback_board
		set board_title = #{board_title}, board_content = #{board_content}
		where board_num = #{board_num}
	</update>
</mapper>





